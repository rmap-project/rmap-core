package info.rmapproject.core.model.disco;

import info.rmapproject.core.exception.RMapException;
import info.rmapproject.core.model.RMapObject;
import info.rmapproject.core.model.RMapTriple;
import info.rmapproject.core.model.RMapIri;
import info.rmapproject.core.model.RMapValue;

import java.net.URI;
import java.util.List;

/**
 * RMap DiSCOs are the focal point of the RMap data model.  DiSCO stands for Distributed Scholarly Compound Object.
 * DiSCOs describe one or more aggregated scholarly resources.  All DiSCOs have a unique persistent URI for retrieval.  
 * Only the list of aggregated Resources is required. Optionally, a DiSCO can also hold a connected graph of assertions 
 * as triples relating to the aggregated resources, a creator, a description, the original ID for the aggregation, 
 * and a link to an additional provenance record.
 * 
 * @author smorrissey, khanson
 */

public interface RMapDiSCO extends RMapObject  {
	
	/**
	 * Gets the aggregated resources.
	 *
	 * @return list of aggregated resources
	 * @throws RMapException the RMap exception
	 */
	public List<URI> getAggregatedResources() throws RMapException;

	/**
	 * Sets the aggregated resources list
	 *
	 * @param aggregatedResources the list of aggregated resources to set
	 * @throws RMapException the RMap exception
	 */
	public void setAggregatedResources(List<URI> aggregratedResources) 
			throws RMapException;

	/**
	 * Gets the graph of statements related to the aggregated resources.
	 *
	 * @return the related statements
	 * @throws RMapException the r map exception
	 */
	public List<RMapTriple> getRelatedStatements() throws RMapException;

	/**
	 * Sets the graph of statements related to the aggregated resources. These must for a connected 
	 * graph with the aggregated resources.
	 *
	 * @param relatedStatements the relatedResources to set
	 * @throws RMapException the r map exception
	 */
	public void setRelatedStatements(List<RMapTriple> relatedStatements) throws RMapException;
	
	/**
	 * Gets the prov generated by IRI.  This indicates the location of provenance data.  It could point to another 
	 * DiSCO that describe a harvest, for example.	 *
	 * @return the prov generated by IRI
	 * @throws RMapException the RMap exception
	 */
	public RMapIri getProvGeneratedBy() throws RMapException;
	
	/**
	 * Sets the prov generated by.
	 *
	 * @param provGeneratedBy the new prov generated by IRI
	 * @throws RMapException the RMap exception
	 */
	public void setProvGeneratedBy(RMapIri provGeneratedBy) throws RMapException;

	/**
	 * Gets the DiSCO creator as asserted in the DiSCO package. This is separate from the 
	 * System creator, and RMap Agent that is capture automatically in the RMap Event.
	 *
	 * @return the DiSCO creator
	 * @throws RMapException the RMap exception
	 */
	public RMapIri getCreator() throws RMapException;
	
	/**
	 * Sets the DiSCO creator as asserted in the DiSCO package. This is separate from the 
	 * System creator, and RMap Agent that is capture automatically in the RMap Event.
	 *
	 * @param creator the new creator
	 * @throws RMapException the r map exception
	 */
	public void setCreator(RMapIri creator) throws RMapException;
	
	/**
	 * Gets the DiSCO Description.
	 *
	 * @return the DiSCO description
	 * @throws RMapException the RMap exception
	 */
	public RMapValue getDescription() throws RMapException;

	/**
	 * Sets the DiSCO description.
	 *
	 * @param description the new DiSCO description
	 * @throws RMapException the RMap exception
	 */
	public void setDescription(RMapValue description) throws RMapException ;

	/**
	 * Gets the DiSCO's original provider id.  Original provider ID is set when a new 
	 * DiSCO is created that already has a DiSCO ID. The ID provided becomes the provider ID 
	 * property of the DiSCO, and a new persistent ID is minted and assigned to the DiSCO.
	 *
	 * @return the provider id
	 * @throws RMapException the r map exception
	 */
	public String getProviderId() throws RMapException;
	
}
